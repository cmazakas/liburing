.\" Copyright (C) 2022 Jens Axboe <axboe@kernel.dk>
.\"
.\" SPDX-License-Identifier: LGPL-2.0-or-later
.\"
.TH io_uring_prep_send 3 "March 12, 2022" "liburing-2.2" "liburing Manual"
.SH NAME
io_uring_prep_send \- prepare a send request
.SH SYNOPSIS
.nf
.B #include <liburing.h>
.PP
.BI "void io_uring_prep_send(struct io_uring_sqe *" sqe ","
.BI "                        int " sockfd ","
.BI "                        const void *" buf ","
.BI "                        size_t " len ","
.BI "                        int " flags ");"
.PP
.BI "void io_uring_prep_sendto(struct io_uring_sqe *" sqe ","
.BI "                          int " sockfd ","
.BI "                          const void *" buf ","
.BI "                          size_t " len ","
.BI "                          int " flags ","
.BI "                          const struct sockaddr *" addr ","
.BI "                          socklen_t " addrlen ");"
.PP
.BI "void io_uring_prep_send_bundle(struct io_uring_sqe *" sqe ","
.BI "                               int " sockfd ","
.BI "                               size_t " len ","
.BI "                               int " flags ");"
.fi
.SH DESCRIPTION
.PP
The
.BR io_uring_prep_send (3)
function prepares a send request. The submission queue entry
.I sqe
is setup to use the file descriptor
.I sockfd
to start sending the data from
.I buf
of size
.I len
bytes and with modifier flags
.IR flags .

After calling this function, additional io_uring internal modifier flags
may be set in the SQE
.I ioprio
field. The following flags are supported:
.TP
.B IORING_RECVSEND_POLL_FIRST
If set, io_uring will assume the socket is currently full and attempting to
send data will be unsuccessful. For this case, io_uring will arm internal
poll and trigger a send of the data when the socket has space available.
If poll does indicate that space is available in the socket, the operation
will proceed immediately.

.TP
.B IORING_RECVSEND_BUNDLE
If set, the send operation will attempt to fill multiple buffers with rather than
just pick a single buffer to fill. To send multiple buffers in a single
send, the buffer group ID set in the SQE must be of the ring provided type.
If set, the CQE
.I res
field indicates the total number of bytes sent, and the buffer ID returned
in the CQE
.I flags
field indicates the first buffer in the send operation. The application must
process the indicated initial buffer ID and until all
.I res
bytes have been seen to know which is the last buffer in the send operation.
The buffers consumed will be contiguous from the initial buffer, in the order
in which they appear in the buffer ring. The CQE struct does not contain
the position of the buffer in the buffer ring, therefore in order to identify
buffers contained by the bundle, it is advised to maintain the cached head
index per buffer ring. This uint16_t index represents the position of the next
buffer to be consumed within the ring. Upon completion of a bundle send operation,
the cached head index should be incremented accordingly.
Sending in bundles can improve performance when more than one chunk of
data is available by eliminating redundant round trips through the networking
stack.
.TP
.B IORING_SEND_VECTORIZED
If set,
.I addr must point to an array of
.I struct iovec
and
.I len
must be the number of vectors in that array. This enables use of vectorized IO
for a normal send operation, rather than needing a sendmsg variant to
accomplish that.
.P

Note that using
.B IOSQE_IO_LINK
with this request type requires the setting of
.B MSG_WAITALL
in the
.IR flags
argument, as a short send isn't a considered an error condition without
that being set.

This function prepares an async
.BR send (2)
request. See that man page for details.

The
.BR io_uring_prep_sendto (3)
function prepares a sendto request. The submission queue entry
.I sqe
is setup to use the file descriptor
.I sockfd
to start sending the data from
.I buf
of size
.I len
bytes and with modifier flags
.IR flags .
The destination address is specified by
.I addr
and
.I addrlen
and must be a valid address for the socket type.

This function prepares an async
.BR sendto (2)
request. See that man page for details.

Both of the above send variants may be used with provided buffers, where rather
than pass a buffer in directly with the request,
.B IOSQE_BUFFER_SELECT
is set in the SQE
.I flags
field, and additionally a buffer group ID is set in the SQE
.I buf_group
field. By using provided buffers with send requests, the application can
prevent any kind of reordering of the outgoing data which can otherwise
occur if the application has more than one send request inflight for a single
socket. This provides better pipelining of data, where previously the app
needed to manually serialize sends.

The bundle version allows the application to issue a single send request,
with a buffer group ID given in the SQE
.I buf_group
field, which keeps sending from that buffer group until it runs out of buffers.
As with any other request using provided buffers,
.B IOSQE_BUFFER_SELECT
must also be set in the SQE
.I flags
before submission. Currently
.I len
must be given as
.B 0
otherwise the request will be errored with
.B -EINVAL
as the result code. Future versions may allow setting
.I
to limit the transfer size. A single CQE is posted for the send, with the result
being how many bytes were sent, on success. When used with provided buffers,
send or send bundle will contain the starting buffer group ID in the CQE
.I flags
field. The number of bytes sent starts from there, and will be in contiguous
buffer IDs after that. Send bundle, and send with provided buffers in general,
are available since kernel 6.10, and can be further identified by checking for
the
.B IORING_FEAT_SEND_BUF_SELECT
flag returned in when using
.BR io_uring_init_queue_params (3)
to setup the ring.

.SH RETURN VALUE
None
.SH ERRORS
The CQE
.I res
field will contain the result of the operation. See the related man page for
details on possible values. Note that where synchronous system calls will return
.B -1
on failure and set
.I errno
to the actual error value, io_uring never uses
.IR errno .
Instead it returns the negated
.I errno
directly in the CQE
.I res
field.
.SH SEE ALSO
.BR io_uring_get_sqe (3),
.BR io_uring_submit (3),
.BR io_uring_buf_ring_init (3),
.BR io_uring_buf_ring_add (3),
.BR send (2)
.BR sendto (2)
